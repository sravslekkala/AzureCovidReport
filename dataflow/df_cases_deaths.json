{
	"name": "df_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesDeaths"
				},
				{
					"dataset": {
						"referenceName": "Lookup",
						"type": "DatasetReference"
					},
					"name": "lookupcountry"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "filterEuropeOnly"
				},
				{
					"name": "selectRequiredFields"
				},
				{
					"name": "castDailyCounts"
				},
				{
					"name": "pivotCounts"
				},
				{
					"name": "lookupCountrysource"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as string,",
				"          indicator as string,",
				"          daily_count as string,",
				"          date as string,",
				"          rate_14_day as string,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> CasesDeaths",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupcountry",
				"CasesDeaths filter(continent=='Europe' && not(isNull(country_code))) ~> filterEuropeOnly",
				"filterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields",
				"selectRequiredFields cast(output(",
				"          daily_count as integer",
				"     ),",
				"     errors: true) ~> castDailyCounts",
				"castDailyCounts pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator),",
				"     count = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotCounts",
				"pivotCounts, lookupcountry lookup(pivotCounts@country == lookupcountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountrysource"
			]
		}
	}
}